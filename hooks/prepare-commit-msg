#!/bin/bash

echo "script:$0 args: $@"

source ~/.bashrc || true
source ~/.bash_profile || true

echo "SHELL: $SHELL $0 node version: $(node -v)"

# Script in general protect master branch (in this project case)
# from anything been merged from specific listed branches
# Logic works locally

# based on ruby script: https://bl.ocks.org/mwise/69ec35b646b52d98050d
# g(Git hook to prevent merging staging branch into master branch)

#echo "0: '$0'" >> log.log
#echo "1: '$1'" >> log.log
#echo "2: '$2'" >> log.log
#echo "3: '$3'" >> log.log
#echo "4: '$4'" >> log.log
#echo "git branch | grep '*' | sed 's/* //': >>$(git branch | grep '*' | sed 's/* //')<<" >> log.log
#echo "cat .git/MERGE_MSG: >>$(cat .git/MERGE_MSG)<<" >> log.log
## outputs:
##        0: '.git/hooks/prepare-commit-msg'
##        1: '.git/MERGE_MSG'
##        2: 'merge'
##        3: ''
##        4: ''
##        git branch | grep '*' | sed 's/* //': >>master<<
##        cat .git/MERGE_MSG: >>Merge branch 'test'<<

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

containsElement () {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

if [ "$COMMIT_SOURCE" != "merge" ]; then

    exit 0;
fi

REMOTE=""

TEST="^.* of .* into .*$"

if [[ "$(cat $COMMIT_MSG_FILE | grep 'Merge branch')" =~ $TEST ]]; then

    REMOTE="$(cat $COMMIT_MSG_FILE | grep 'Merge branch' | sed -E "s#^.*of (.*) into.*\$#\1#")"

    TEST="Merge branch"

    if [[ "$REMOTE" =~ $TEST ]]; then

        REMOTE=''
    fi
fi

TO="$(git branch | grep \* | cut -d ' ' -f2)"

FROM="$(cat $COMMIT_MSG_FILE | sed -E "s#^[^']+'([^']+)'.*\$#\1#")"

echo "REMOTE: $REMOTE"

echo "FROM: $FROM"

echo "TO: $TO"

CMD="node .git/monorepo/prevent-merge-local.js .git/config.yml $TO $FROM"

if [ "$REMOTE" != "" ]; then

    CMD="node .git/monorepo/prevent-merge-remote.js .git/config.yml $TO $REMOTE"
fi

printf "cmd: $CMD\n"

$CMD

ACCESS="$?"

printf "\n";

echo "ACCESS='$ACCESS' - 0 means allowed, 1 denied"

if [ "$ACCESS" != "0" ]; then

    printf "\n\nABORTED\n\n"

    printf "\nrun at the end:\n    git merge --abort\n\n"

    exit 1
fi

exit 0



# alternative logic



LIST="one two three"

IFS=' ' read -ra TMP <<<"$LIST";
ARR=("${TMP[@]}")

printf '%s\n' "${ARR[@]}"

echo ">>>"${ARR[@]}"<<<"

containsElement "$FROM" "${ARR[@]}"

AT="$?"
echo "AT='$AT'"

if [ "$AT" != "0" ]; then

    exit 1
fi

printf "\nrun at the end:\n    git merge --abort\n\n"

exit 1